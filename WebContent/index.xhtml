<!DOCTYPE html>
<html lang="en"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://xmlns.jcp.org/jsf/html"	
	xmlns:a="http://xmlns.jcp.org/jsf/passthrough"
	xmlns:f="http://java.sun.com/jsf/core">
<h:head>
	<title>Homepage</title>
	<!-- <h:outputStylesheet library="design" name="style.css" /> -->
	<style>
		* {
			margin: 0;
			padding: 0;
			box-sizing: border-box;
			font-family: sans-serif;
			color: white;
		}

		.form {
			display: flex;
			height: 100vh;
			align-items: center;
			justify-content: space-evenly;
			flex-direction: column;
		}
		
		.form h1 {
			transition: 0.25s ease;
			font-size: 70px;
			position: fixed;
			top: 6%;
			color: white;
			text-align: center;
		}
		
		.form-content {
			width: 40%;
			transition: 0.25s;
			position: absolute;
			bottom: 5%;
		}
		
		.form-content input[type=text] {
			height: 40px;
			width: 100%;
			border: 0px solid transparent;
			padding: 10px;
			font-size: 22px;
			margin: 5px 0;
			background: transparent;
			transition: 0.25s;
		}
		
		.form-content input[type=text]:focus {
			border: 2px solid #6fde79;
			transition: 0.25s;
			border-radius: 20px;
		}
		
		.button {
			display: flex;
			align-items: center;
			justify-content: center;
			width: 100%:
		}
		
		.form-content input[type=submit] {
			margin-top: 20px;
			width: 50%;
			background: transparent;
			border: 2px solid white;
			height: 40px;
			font-size: 20px;
			border-radius: 20px;
			transition: 0.25s;
		}
		
		.form-content input[type=submit]:hover {
			background: #0f2027;
			transition: 0.25s;
			cursor: pointer;
			transition: 0.25s;
			border-radius: 0px;
			width: 100%;
		}
		
		.form-content label {
			transition: 0.25s;
			font-size: 30px;
			text-align: center;
			opacity: 0.8; 	
			display: flex;
			justify-content: center;
			align-items: center;
		}
		
		fieldset {
			transition: 0.25s;
			padding: 20px;
			border: 0px solid white;
			border-radius: 20px;
		}
		
		.ml15 {
			font-weight: 800;
			text-transform: uppercase;
			letter-spacing: 0.5em;
			display: flex;
			align-items: center;
			flex-direction: column;
			flex-wrap: wrap;
			justify-content: center;
		}
		
		.ml15 .word {
			display: inline-block;
			line-height: 1em;
			margin-top: 5px;
		}
		
		.errMsg{
			color: #DA4453;
			font-size: 15px;
			margin-left: 9px;
			font-weight: bold;
			letter-spacing: 2px;
		}
		
		@media only screen and (max-width: 1000px) {
			.form h1 {
				transition: 0.25s;
				font-size: 60px;
				top: 7%;
			}
			
			.form-content{
				transition: 0.25s;
				width: 70%;
				bottom: 5%;
			}
			
			.form-content label {
				transition: 0.25s;
				font-size: 25px;
				text-align: center;
			}
		}
		
		.background{
			position: absolute;
			height: 100vh;
			width: 100%;
			background: linear-gradient(140deg, #0f2027, #203a43, #2c5364); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */;
			background-size: 600% 600%;
			animation: bg-move 20s infinite linear;
		}
		
		@keyframes bg-move {
			0% {
				background-position: 0% 50%
			}
			
			50% {
				background-position: 100% 50%;
			}
			
			100% {
				background-position: 0% 50%;
			}
		}
	</style>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/2.0.2/anime.min.js"></script>
</h:head>
<h:body>
	<div class="background"></div>
	<div class="form">
		<h1 class="ml15">
			<span class="word">Welcome</span> <span class="word">Friend</span>
		</h1>
		<div class="form-content">
			<fieldset>
				<h:form id="form">
					<h:outputLabel for="firstName" value="First Name" />
					<br />
					<h:inputText id="firstName" name="firstName"
						value="#{javaBean.firstName}" required="true"
						requiredMessage="First Name is required"
						a:placeholder="Enter your First Name"
						validatorMessage="Invalid length" autocomplete="off">
						<f:validateLength minimum="3" maximum="24" />
					</h:inputText>
					<br />
					<span class="errMsg" id="fnError"><h:message for="firstName" /></span>
					<h:outputLabel for="lastName" value="Last Name" />
					<br />
					<h:inputText id="lastName" name="lastName"
						value="#{javaBean.lastName}" required="true"
						requiredMessage="Last Name is required"
						a:placeholder="Enter your Last Name"
						validatorMessage="Invalid length" autocomplete="off">
						<f:validateLength minimum="2" maximum="24" />
					</h:inputText>
					<br />
					<span class="errMsg" id="lnError"><h:message for="lastName" /></span>
					<h:outputLabel for="email" value="Email" />
					<br />
					<h:inputText id="email" name="email" value="#{javaBean.email}"
						required="true" requiredMessage="Email is required"
						a:placeholder="Enter your Email">

					</h:inputText>
					<span class="errMsg" id="eError"><h:message for="email" /></span>
					<h:outputLabel for="contactNumber" value="Contact Number" />
					<br />
					<h:inputText id="contactNumber" name="contactNumber"
						value="#{javaBean.contactNumber}" required="true"
						requiredMessage="Contact Number is required"
						a:placeholder="Enter your Contact Number" 
						validatorMessage="Invalid Contact Number" autocomplete="off">
						<f:validateRegex pattern="\d{4}-\d{3}-\d{4}" />
					</h:inputText>
					<br />
					<span class="errMsg" id="conError"><h:message for="contactNumber" /></span>
					<br />
					<h:outputLabel for="age" value="Age" />
					<br />
					<h:inputText id="age" name="age" value="#{javaBean.age}"
						required="true" requiredMessage="Age is required"
						a:placeholder="Enter your Age"
						validatorMessage="Age must be 18 and above">
						<f:validateDoubleRange minimum="18" maximum="70" />
					</h:inputText>
					<br />
					<span class="errMsg" id="ageError"><h:message for="age" /></span>
					<div class="button">
						<h:commandButton value="Continue" action="#{javaBean.proceed}" />
					</div>
				</h:form>
			</fieldset>
		</div>
	</div>
	<script>
		const firstName = document.getElementById('form:firstName');
		const lastName = document.getElementById('form:lastName');
		const email = document.getElementById('form:email');
		const contactNo = document.getElementById('form:contactNumber');
		const age = document.getElementById('form:age');
		const fnError = document.getElementById('fnError')
		const lnError = document.getElementById('lnError')
		const eError = document.getElementById('eError')
		const conError = document.getElementById('conError')
		const ageError = document.getElementById('ageError')
		const redB = "2px solid red";
		const greenB = "2px solid #6fde79";
		firstName.addEventListener('keyup', (e) => {
			if(firstName.value.trim().length &lt; 3 || firstName.value.trim().length &gt; 24) {
				firstName.style.border = redB
				fnError.innerHTML = "Invalid length of " + firstName.value.trim().length
			}else {
				firstName.style.border = greenB
				fnError.innerHTML = ""
			}
		})
		
		lastName.addEventListener('keyup', () => {
			if(lastName.value.trim().length &lt; 2 || lastName.value.trim().length &gt; 24) {
				lastName.style.border = redB
				lnError.innerHTML = "Invalid length of " + (lastName.value.length)
			}else {
				lastName.style.border = greenB
				lnError.innerHTML = ""
			}
		})
		
		email.addEventListener('keyup', () => {
			let regex = /^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/; 
			if(email.value.match(regex)) {
				email.style.border = greenB
				eError.innerHTML = ""
			}else {
				email.style.border = redB
				eError.innerHTML = "Email format must follow (example@example.com)"
			}
		})
		
		contactNo.addEventListener('keyup', () => {
			let regex = /\d{4}-\d{3}-\d{4}/;
			if(contactNo.value.match(regex)) {
				contactNo.style.border = greenB
				conError.innerHTML = ""
			}else {
				contactNo.style.border = redB
				conError.innerHTML = "Invalid number format must follow (0XXX-XXX-XXX)"
			}
		})
		
		age.addEventListener('keyup', () => {
			if(age.value &lt; 18 || age.value &gt; 70) {
				age.style.border = redB
				ageError.innerHTML = "Age must be 18 and above"
			} else {
				age.style.border = greenB
				ageError.innerHTML = ""
			}
		})
		
		anime.timeline({loop: false})
		  .add({
		    targets: '.ml15 .word',
		    scale: [14,1],
		    opacity: [0,1],
		    easing: "easeOutCirc",
		    duration: 800,
		    delay: (el, i) => 800 * i
		  }).add({
		    targets: '.ml15',
		    opacity: 1,
		    duration: 1000,
		    easing: "easeOutExpo",
		    delay: 1000
		  });
		
	</script>
</h:body>
	

</html>