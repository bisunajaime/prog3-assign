<!DOCTYPE html>
<html lang="en"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://xmlns.jcp.org/jsf/html"	
	xmlns:a="http://xmlns.jcp.org/jsf/passthrough"
	xmlns:f="http://java.sun.com/jsf/core">
<h:head>
	<title>Response Page</title>
	<!-- <h:outputStylesheet name="design/style.css"/> -->
	<style>
		* {
			padding: 0;
			margin: 0;
			box-sizing: border-box;
			overflow: hidden;
			font-family: 'Courier New', Courier, monospace
		}
		
		.grid {
			display: grid;
			grid-template-columns: repeat(2, 50%);
			grid-template-rows: repeat(2, 50%);
			height: 100vh;
			width: 100%;
		}
		
		.login {
			grid-column: 1/2;
			grid-row: 1/3;
			color: rgb(235, 235, 235);
			background: rgb(218, 216, 216);
			height: 100%;
			width: 100%;
			display: flex;
			align-items: center;
			justify-content: center;
			flex-direction: column;
		}
		
		.bg {
			width: 100%;
			height: 100%;
			grid-column: 2/3;
			grid-row: 1/3;
			display: grid;
			grid-template-columns: repeat(auto-fill, 20%);
			grid-template-rows: repeat(auto-fill, 20%);
			background: rgb(236, 236, 236);
		}
		
		.square {
			border: 3px solid rgb(223, 223, 223);
			height: 100%;
			grid-gap: 20px;
			transition: 0.25s;
			cursor: none;
		}
		
		.square:hover {
			background: rgb(231, 230, 230);
			transition: 0.25s;
			cursor: pointer;
		}
		
		.square:active {
			background: white;
			transition: 0.25s;
			opacity: 0.5;
		}
		
		.bg-white {
			background: rgb(134, 87, 87);
		}
		
		.login img {
			margin-bottom: 30px;
		}
		
		.form {
			width: 70%;
		}
		
		.form label {
			font-size: 1.8em;
			color: black;
			text-align: center;
		}
		
		input {
			display: inline-block;
			height: 35px;
			width: 100%;
			padding: 20px;
			font-size: 1.5em;
			border: 2px solid black;
		}
		
		#submit {
			width: 100%;
			margin-top: 10px;
			height: 50px;
			background: black;
			color: white;
			font-size: 1.5em;
			border: 2px solid white;
		}
		
		#form-label {
			display: none;
		}
		
		@media only screen and (min-width: 320px) and (max-width: 600px) {
			.grid {
				grid-template-columns: 50% 50%;
				grid-template-rows: 70% 30%
			}
			.login {
				grid-column: 1/3;
				grid-row: 1/2
			}
			.bg {
				grid-column: 1/3;
				grid-row: 2/3;
			}
			.form {
				display: none;
			}
			#img {
				cursor: pointer;
			}
			.form-unhide {
				display: block;
				width: 90%;
			}
			.form-unhide label {
				font-size: 1.2em;
			}
			.hide-img {
				display: none;
			}
			input {
				width: 100%;
				height: 10px;
				padding: 15px;
				font-size: 0.8em;
				font-weight: bold;
			}
			#submit {
				margin-top: 5px;
				height: 35px;
			}
		}
		
		@media only screen and (min-width: 600px) and (max-width: 1000px) {
			.grid {
				grid-template-columns: 50% 50%;
				grid-template-rows: 70vh 30vh;
			}
			.login {
				grid-column: 1/3;
				grid-row: 1/2;
			}
			.bg {
				grid-column: 1/3;
				grid-row: 2/3;
			}
			.login {
				flex-direction: row;
				justify-content: space-around;
			}
			.form {
				width: 50%;
			}
			#form-label {
				display: block;
				color: black;
				font-size: 2.5em;
				text-align: center;
			}
		}
	</style>
</h:head>
	
<h:body>
	<div class="grid">
		<div class="login">
			<h:graphicImage value="/resources/img/Adidas_logo.svg" id="img"/>
			<div class="form">
				<h1 id="form-label">Enter Information</h1>
				<h:form>
					<h:outputLabel for="firstName" value="First Name"/>
					<h:inputText id="firstName" name="firstName"
						value="#{javaBean.firstName}" required="true"
						requiredMessage="First Name is required"
						a:placeholder="Enter your First Name"
						validatorMessage="Invalid length" autocomplete="off">
						<f:validateLength minimum="3" maximum="24" />
					</h:inputText>
					<br />
					<span class="errMsg" id="fnError"><h:message for="firstName" /></span>
					<h:outputLabel for="lastName" value="Last Name" />
					<br />
					<h:inputText id="lastName" name="lastName"
						value="#{javaBean.lastName}" required="true"
						requiredMessage="Last Name is required"
						a:placeholder="Enter your Last Name"
						validatorMessage="Invalid length" autocomplete="off">
						<f:validateLength minimum="2" maximum="24" />
					</h:inputText>
					<br />
					<span class="errMsg" id="lnError"><h:message for="lastName" /></span>
					<h:outputLabel for="email" value="Email" />
					<br />
					<h:inputText id="email" name="email" value="#{javaBean.email}"
						required="true" requiredMessage="Email is required"
						a:placeholder="Enter your Email">

					</h:inputText>
					<span class="errMsg" id="eError"><h:message for="email" /></span>
					<h:outputLabel for="contactNumber" value="Contact Number" />
					<br />
					<h:inputText id="contactNumber" name="contactNumber"
						value="#{javaBean.contactNumber}" required="true"
						requiredMessage="Contact Number is required"
						a:placeholder="Enter your Contact Number" 
						validatorMessage="Invalid Contact Number" autocomplete="off">
						<f:validateRegex pattern="\d{4}-\d{3}-\d{4}" />
					</h:inputText>
					<br />
					<span class="errMsg" id="conError"><h:message for="contactNumber" /></span>
					<br />
					<h:outputLabel for="age" value="Age" />
					<br />
					<h:inputText id="age" name="age" value="#{javaBean.age}"
						required="true" requiredMessage="Age is required"
						a:placeholder="Enter your Age"
						validatorMessage="Age must be 18 and above">
						<f:validateDoubleRange minimum="18" maximum="70" />
					</h:inputText>
					<br />
					<span class="errMsg" id="ageError"><h:message for="age" /></span>
					<div class="button">
						<h:commandButton value="Continue" action="#{javaBean.proceed}" />
					</div>
				</h:form>
			</div>
		</div>
		<div class="bg"></div>
	</div>

	<script>
		const square = document.getElementsByClassName('square')
	    const bg = document.getElementsByClassName('bg')
	    const newSquare = document.createElement("div")
	    const loginBg = document.getElementsByClassName('login')
	    const label = document.getElementsByTagName('label')
	    const img = document.getElementById('img')
	    const form = document.getElementsByClassName('form')
	    const formLabel = document.getElementById('form-label')
	    
	    const firstName = document.getElementById('form:firstName');
		const lastName = document.getElementById('form:lastName');
		const email = document.getElementById('form:email');
		const contactNo = document.getElementById('form:contactNumber');
		const age = document.getElementById('form:age');
		const fnError = document.getElementById('fnError')
		const lnError = document.getElementById('lnError')
		const eError = document.getElementById('eError')
		const conError = document.getElementById('conError')
		const ageError = document.getElementById('ageError')
		const redB = "2px solid red";
		const greenB = "2px solid #6fde79";
	
	    img.addEventListener('click', () => {
	        img.classList.add('hide-img')
	        form[0].classList.add('form-unhide')
	    })
	
	    for (let i = 0; i &lt; 25; i++) {
	        newSquare.setAttribute("class", "square")
	        bg[0].appendChild(newSquare.cloneNode())
	    }
	    for (let i = 0; i &lt; square.length; i++) {
	        let red = Math.round(Math.random() * 150)
	        let green = Math.round(Math.random() * 150)
	        let blue = Math.round(Math.random() * 150)
	        if (i % 2 == 0) {
	            square[i].style.backgroundColor = `rgb(${red},${green},${blue})`
	        } else {
	            square[i].style.backgroundColor = `rgb(${green},${red},${blue})`
	        }
	    }
	    for (let i = 0; i &lt; square.length; i++) {
	        square[i].addEventListener('click', (e) => {
	            let red = Math.round(Math.random() * 150)
	            let green = Math.round(Math.random() * 150)
	            let blue = Math.round(Math.random() * 150)
	            if (i % 2 == 0) {
	                square[i].style.backgroundColor = `rgb(${red},${green},${blue})`
	                loginBg[0].style.background = `rgb(${red},${green},${blue})`
	                loginBg[0].style.transition = "0.5s"
	            } else {
	                square[i].style.backgroundColor = `rgb(${blue},${red},${green})`
	                loginBg[0].style.background = `rgb(${blue},${red},${green})`
	                loginBg[0].style.transition = "0.5s"
	            }
	            for (let i = 0; i &lt; label.length; i++) {
	                label[i].style.color = "white"
	                formLabel.style.color = "white"
	            }
	        })
	    }
	</script>
</h:body>
</html>